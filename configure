#!/bin/sh
# Created by: WestleyR
# email: westleyr@nym.hush.com
# Date: Feb 9, 2018
# https://github.com/WestleyR/list-files
# Version-1.0.0
#
# The Clear BSD License
#
# Copyright (c) 2019 WestleyR
# All rights reserved.
#
# This software is licensed under a Clear BSD License.
#

set -e

MAKEFILE="Makefile"

MAKEFRAG="makefile-parts"

ALL_MAKE="all.makefile"
STATIC_MAKE="static.makefile"
INSTALL_MAKE="install.makefile"
CLEAN_MAKE="clean.makefile"
UNINSTALL_MAKE="uninstall.makefile"

FILES_NEEDED="main-lf.c ${MAKEFRAG}/${ALL_MAKE} \
${MAKEFRAG}/${STATIC_MAKE} ${MAKEFRAG}/${INSTALL_MAKE} ${MAKEFRAG}/${CLEAN_MAKE} \
${MAKEFRAG}/${UNINSTALL_MAKE}"

PREFIX="/usr/bin"
COMPILER="gcc"

help_menu() {
    echo "USAGE:
  $0 [option]

OPTIONS:
  --prefix=string    : set install prefix.
  --compiler=string  : set the compiler, eg. gcc, tcc...
"

    exit 0
}

for arg in "$@"; do
    if [ "$arg" = "-h" ] || [ "$arg" = "--help" ]; then
        help_menu
    elif [ $(echo "$arg" | strcomp -s="--prefix=") -eq 0 ]; then
        PREFIX=`echo "$arg" | sed 's/--prefix=//'`
    elif [ $(echo "$arg" | strcomp -s="--compiler=") -eq 0 ]; then
        COMPILER=`echo "$arg" | sed 's/--compiler=//'`
    fi
done

echo "  Checking dependcies:"

echo -n "  Checking for: strcomp... "
if ! [ -x "$(command -v strcomp)" ]; then
    pl --red "missing"
    echo "ERROR: Need 'strcomp'"
    echo
    echo "Please download/install strcomp from:"
    echo "https://github.com/WestleyR/strcomp"
    exit 1
fi
echo "yes"

echo -n "  Checking for: make... "
if ! [ -x "$(command -v make)" ]; then
    pl --red "missing"
    echo "ERROR: Need 'make'"
    echo
    echo "Please download/install it by:"
    echo ">> $ sudo apt-get install make  # or"
    echo ">> $ sudo apt-get install build-essential"
    exit 1
fi
echo "yes"

echo -n "  Checking for: ${COMPILER}... "
if ! [ -x "$(command -v ${COMPILER})" ]; then
    echo "no"

    COMPILER_B="tcc"
    echo "  Now looking for backup compiler: ${COMPILER_B}... "
    if ! [ -x "$(command -v ${COMPILER_B})" ]; then
        echo "no"
        echo "ERROR: No compiler found."
        echo "ERROR: Need 'gcc', or 'tcc'"
        echo
        echo "Please download/install it by:"
        echo ">> $ sudo apt-get install build-essential"
        exit 1
    else
        echo "yes"
        echo
        echo "ERROR: The compiler (${COMPILER}), is not found..."
        echo "But, you do have ${COMPILER_B}. Try:"
        echo
        echo "./configure --compiler=tcc"
        echo
        exit 1
    fi
fi
echo "yes"

echo "  Setting prefix : ${PREFIX}"
echo "  Setting compiler : ${COMPILER}"

echo "  Checking for existing files..."

for file in $FILES_NEEDED; do
    echo -n "  Checking for file : ${file}... "
    if [ ! -e "$file" ]; then
        echo "no"
        echo "ERROR: File missing : ${file}"
        echo
        echo "Try redownloading print-line from https://github.com/WestleyR/pac"
        echo
        exit 100
    else
        echo "yes"
    fi
done

echo "  Building makefile..."

cat << EOF > "$MAKEFILE"
# Created by: WestleyR
# email: westleyr@nym.hush.com
# Date: Feb 8, 2018
# https://github.com/WestleyR/pac
# Version-1.0.0
#
# The Clear BSD License
#
# Copyright (c) 2019 WestleyR
# All rights reserved.
#
# This software is licensed under a Clear BSD License.
#
# This Makefile was generated by: configure, and was:
#  generated in      : $(pwd)
#  generated by      : $(whoami)
#  generated on      : $(date "+%B %d, %Y, %I:%M:%S %p")
#  generated on arch : $(uname -m)
#
#
# DO NOT EDIT!
#

EOF


if [ "$COMPILER" = "gcc" ]; then
    cat << EOF >> "$MAKEFILE"

PREFIX = ${PREFIX}
CODE_NAME = main-lf.c
SCRIPT_NAME = lf

COMPILER = ${COMPILER}

STATIC_BUILD_FLAG = -static
GCC_FLAGS = -std=c99
FLAG = 

EOF
else
    cat << EOF >> "$MAKEFILE"

PREFIX = ${PREFIX}
CODE_NAME = main-lf.c
SCRIPT_NAME = lf

COMPILER = ${COMPILER}

FLAG = 

EOF
fi


cat "${MAKEFRAG}/${ALL_MAKE}" >> "$MAKEFILE"

if [ "$COMPILER" != "tcc" ]; then
    cat "${MAKEFRAG}/${STATIC_MAKE}" >> "$MAKEFILE"
fi

cat "${MAKEFRAG}/${INSTALL_MAKE}" >> "$MAKEFILE"
cat "${MAKEFRAG}/${CLEAN_MAKE}" >> "$MAKEFILE"
cat "${MAKEFRAG}/${UNINSTALL_MAKE}" >> "$MAKEFILE"

echo "DONE."
echo
echo "Makefile ready; do:"
echo
echo "  $ make [make_option]"
echo "  $ sudo make install"
echo

#
# End configure
#
